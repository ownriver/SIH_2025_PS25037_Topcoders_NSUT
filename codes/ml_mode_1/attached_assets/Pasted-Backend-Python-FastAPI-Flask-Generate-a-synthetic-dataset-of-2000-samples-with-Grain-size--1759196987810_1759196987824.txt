Backend (Python + FastAPI/Flask):

Generate a synthetic dataset of ~2000 samples with:

Grain size (numeric 0.1–2 mm).

Beach type (berm, dune, intertidal).

Geotagged coordinates from known Indian coastal regions (Goa, Chennai, Vizag, Gujarat, Kerala, Odisha, Andaman).

Placeholder image paths.

Train a simple ML model:

Option A: CNN (using placeholder random images).

Option B: RandomForest/XGBoost for tabular dataset.

Save the model (model.pkl) and write inference endpoint.

Connect to Supabase using API keys.

Whenever a new image record is added to images table, run prediction and insert into predictions.

Database (Supabase):

Create images and predictions tables (schema provided below).

Store uploaded photos (or placeholders) + coordinates.

Store predictions with class and confidence.

Frontend (React + Tailwind inside Replit):

Name: SamundraManthan.

Dashboard should include:

Dynamic coastal map of India (using Leaflet.js or Mapbox).

Pins showing uploaded images and predictions.

On-click → show sediment details, image, prediction confidence.

Analytics:

Pie chart: % of fine/medium/coarse sediments.

Line chart: sediment change over time per region.

Heatmap overlay: highlight erosion-prone areas.

Upload page: allow manual image upload (simulate ESP device).

Live feed: list of latest uploads with predictions.

Visualization:

Use Recharts or Chart.js for graphs.

Use Leaflet.js for interactive map with Indian coastline highlighted.

Ensure responsive, modern design with Tailwind.

Workflow Integration:

ESP device → Supabase storage (image + lat/long).

Backend job → run ML model, insert prediction.

Frontend → dynamic dashboard updates with new predictions.

Deliverables:

Synthetic dataset generator script.

ML training script.

Backend server with Supabase + ML inference.

Frontend React app with dashboard, analytics, and coastal map.

Supabase schema:

create table images (
  id uuid primary key default gen_random_uuid(),
  uploaded_at timestamp default now(),
  image_url text not null,
  latitude float8 not null,
  longitude float8 not null,
  prediction jsonb,
  researcher_id uuid references auth.users(id)
);

create table predictions (
  id uuid primary key default gen_random_uuid(),
  image_id uuid references images(id),
  grain_size_class text,
  beach_type text,
  confidence float8,
  created_at timestamp default now()
);